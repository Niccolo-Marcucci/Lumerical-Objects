# Copyright 2020 Niccol√≤ Marcucci <niccolo.marcucci@polito.it>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
##########################################################################

# This file creates a spiral shaped structure in which it is possible to set
# the number of arms, the internal diameter, the period of the spiral and the  
# number of turns the arms do (actually it sets the number of periods seen 
# radially, from the center outwards).
# This spiral structure can be used for creating grooves onto a dielectric layer
# (hence the name chosen for the various properties).

addstructuregroup;
set('name','metasurface outcoupler');
set('x',0);
set('y',0);
set('z',0);
    adduserprop('material groove',5,'<Object defined dielectric>');
    adduserprop('index groove',0,1);
    adduserprop('N rings',0,10);             # high refreactive index layer
    adduserprop('topological charge',0,0);   # number of arms of the spiral
    adduserprop('thickness',2,0.1e-6);          # thickness
    adduserprop('rectangular element tilt',2,45);	
    adduserprop('pattern type',1,'radial');	# options: 'filled', 'radial','radial filled'
    adduserprop('start radius',2,1.5e-6);
    adduserprop('period',2,0.25e-6);
    adduserprop('fill factor',0,0.5);
    adduserprop('z min',2,0);
    
    myscript= " 
        deleteall;
        material_out = %material groove%;
        index_out = %index groove%;
        n_rings = %N rings%;
        start_radius = %start radius%;
        lambda = %period%;
        n_arms = %topological charge%;
        FF = %fill factor%;
        D=start_radius*2;
        scatter_tilt = %rectangular element tilt%/180*pi;
        type = %pattern type%;
        resolution = 50;  # even value required
        
        radius = matrix(resolution/2);        # radius, function of theta
        theta = matrix(resolution/2);
        vertices = matrix(2,resolution);
        
        int_res=15;
        r_n=matrix(int_res);
        the=matrix(int_res);
        vert=matrix(2,int_res);
        
        if (n_arms != 0) {
           # Each arm opf the spiral is defined by a polygon 
           for (j=0:abs(n_arms)-1) { 
              # define theta   
              theta(1:resolution/2) = linspace(0,2*pi*n_rings/n_arms,resolution/2);
              theta((resolution/2+1):resolution) = linspace(2*pi*n_rings/n_arms,0,resolution/2);
              # parametrize the radius
              radius(1:resolution/2) = linspace(start_radius,start_radius+lambda*n_rings,resolution/2);
              radius((resolution/2+1):resolution) = linspace(start_radius+lambda*n_rings+lambda*FF,start_radius+lambda*FF,resolution/2);
              vertices(1,1:resolution) = radius*cos(theta+2*pi*j/n_arms);		
              vertices(2,1:resolution) = radius*sin(theta+2*pi*j/n_arms);
            
              # add polygon object and set properties
              addpoly;		
              set('name','loop_A_'+num2str(j));
              set('vertices',vertices);
              set('material',material_out);
              if(get('material')=='<Object defined dielectric>') 
                { set('index',index_out); }
              set('z min', %z min%);
              set('z max', %z min%+thickness);
            
              if (start_radius == 0) {
                  # close the spiral on the origin if the initial radius is null
                  r_n = linspace(start_radius+lambda*FF,0,int_res);
                  the = linspace(0,-pi/n_arms,int_res);
                  vert(1,:) = r_n*cos(the+2*pi*j/n_arms);		
                  vert(2,:) = r_n*sin(the+2*pi*j/n_arms);
                  addpoly;		
                  set('name','start bump'+num2str(j));
                  set('vertices',vert);
                  set('material',material_out);
                  if(get('material')=='<Object defined dielectric>') 
                    { set('index',index_out); }
                  set('z min', %z min%);
                  set('z max', %z min%+thickness);
              }
           }
        } else {
           if (n_rings!=0) {
           for (n = 1:n_rings){
                alpha=scatter_tilt;
                radius = D/2+(n-1/2)*lambda;
                if (type == 'filled') {
                    n_scatter = round(2*pi*radius/lambda);
                    sc_length = 2*pi*radius/n_scatter;
                }else if (type == 'radial') {
                    n_scatter = round(2*pi*start_radius/lambda);
                    sc_length = 2*pi*start_radius/n_scatter;
                }else if (type == 'radial filled') {
                    n_scatter = round(2*pi*start_radius/lambda);
                    sc_length = 2*pi*radius/n_scatter;
                }else {
                    error;
                }
                sc_width = lambda*FF*cos(alpha);
                for ( k = 1:n_scatter ) {
                    location_tilt = 2*pi/n_scatter*k;
                    
                    tilt = (pi/2 + scatter_tilt + location_tilt)/pi*180;
                    addrect;
                        set('name','base');
                        set('x',radius*cos(location_tilt));
                        set('x span',sc_length);
                        set('y',radius*sin(location_tilt));
                        set('y span',sc_width);
                        set('z min',0);
                        set('z max',thickness);
                        set('first axis','z');
                        set('rotation 1',tilt);
                }
            }}
        }
    ";
    
set('script',myscript);
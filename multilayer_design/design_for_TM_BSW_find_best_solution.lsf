closeall;
clear;

randreset;
# arbitrary partition functions
function threshold(x, minimum, maximum) {
    width = maximum-minimum;
    average = (maximum+minimum)/2;
    KbT = width/5;
    return 1-1/(exp((x-average)/KbT)+1);
}
function range_f(x, minimum, maximum) {
    fwhm = maximum-minimum;
    average = (maximum+minimum)/2;
    sigma = fwhm/4;
    return 1-exp(-(x-average)^2/(2*sigma^2));
}
# random tossing
function toss(value, ranges){
    return round( value-ranges*(rand-0.5));
}


n_Ti2O2=2.53+1i*1e-4;                          # high refractive index
n_AlO=1.65+1i*1e-4;                            # low refractive index
n_SiO2=1.46;                                   # low refractive index
n_pmma=1.48+1i*1e-4;
n_Ta2O5=2.08+1i*1e-4;                          # high refractive inde

n_in=n_SiO2;
n_out=1;
nA=n_AlO;
nB=n_Ti2O2;
nlast=n_SiO2+1i*1e-4;
ntail=n_pmma;#nB;

theta_lim = asin(n_out/n_in)/pi*180+0.7;
theta = linspace(40,56,1e4);                    # angle vector10
lambda=570e-9;
N=11;

kL=2*pi/lambda*real(nA)*cos(40/180*pi);
kH=2*pi/lambda*real(nB)*cos(40/180*pi);
FF=0.7;
period=pi*0.95/(kL*FF+kH*(1-FF));
dA_0=period*FF;
dB_0=period*(1-FF);
d_out=0e-6;

best_parameters=matrix(8);
best_index=matrix(6);
best_parameters(1) = 0;#dB_0;          # pmma thickness
best_parameters(2) = dA_0;          # last layer thickness
best_parameters(3) = 15e-9;         # AlO layer thicknes (etch stop layer)
best_parameters(4) = dB_0;          # second last B-type layer (a layer below etch stop)
best_parameters(5) = dA_0;          # second last A-type layer
best_parameters(6) = dA_0;          # dielectric 1
best_parameters(7) = dB_0;          # dielectric 2

best_index(1) = n_in;          # substrate refractive index
best_index(2) = n_out;         # air refractive index
best_index(3) = nA;           # first material refractive index
best_index(4) = nB;           # second refractive index
best_index(5) = nlast;        # first layer above AlO refractive index
best_index(6) = ntail;        # second layer above AlO refractive index

best_parameters(8) = N;            # number of layer couples in the lower stack

# the stack is fixed to be S-(B-A)xN-B-AlO-last-tail-air

# N high-low couples + one for substrate, one for air, one for the pmma layer, one for last titania
# one for allumina protective layer and one for second last titania.
N_layers=2*N+6;

n1 = matrix(N_layers);   # with all layer including pmma
n2 = matrix(N_layers-1); # without pmma
n3 = matrix(N_layers-2); # without last titania
d1 = matrix(N_layers);
d2 = matrix(N_layers-1);
d3 = matrix(N_layers-2);
P=matrix(10);
Partition = 0;#length(P); 
P_old = Partition;
i=1;
tol=1;
Pm=matrix(11,400);

###
#loaddata('best_param2');
n_in = best_index(1);        
n_out = best_index(2);       
nA = best_index(3);          
nB = best_index(4);          
nlast = best_index(5);      
ntail = best_index(6);       
N = best_parameters(8);    

for (j=1; j~=400 | tol==0; j=j+1) {
    
    i=i+1;
    if (i==8) {
        i=1;
    }
    if (i==3) {             # don't change AlO thickness
        i=4;
    }
    
    parameters = best_parameters ;

    value = best_parameters(i)*1e9;
    if (i==1) {             # pmma thickness
        rangee = value/2;
    } else if (i==2) {      # last layer thickness
        rangee = value/2;        
    } else if (i==3) {      # AlO layer thicknes (etch stop layer)
        #value = 80;
        rangee = value/2;        
    } else if (i==4) {      # second last B layer (a layer below etch stop)
        rangee = value*2;        
    } else if (i==5) {      # last A layer
        rangee = value/2;        
    } else if (i==6) {
        rangee = value*0.4;        
    } else if (i==7) {
        rangee = value*0.4;        
    }
    parameters(i)=toss(value,rangee)*1e-9;
    
    parameters(4) = parameters(7);
    parameters(5) = parameters(6);
    
    tail = parameters(1);
    dlast= parameters(2);      
    dAlO = parameters(3);
    dsecondlast_B = parameters(4);
    dsecondlast_A = parameters(5);
    dA = parameters(6);
    dB = parameters(7);
    
    n1(1) = n_in;
    n1(2:2:2*N) = nB;
    n1(3:2:2*N+1) = nA;
    n1(end-4) = nB;
    n1(end-3) = n_AlO;
    n1(end-2) = nlast;
    n1(end-1) = ntail;
    n1(end) = n_out;
    
    n2(1) = n_in;
    n2(2:2:2*N) = nB;
    n2(3:2:2*N+1) = nA;
    n2(end-3) = nB;
    n2(end-2) = n_AlO;
    n2(end-1) = nlast;
    n2(end) = n_out;
    
    n3(1) = n_in;
    n3(2:2:2*N) = nB;
    n3(3:2:2*N+1) = nA;
    n3(end-2) = nB;
    n3(end-1) = n_AlO;
    n3(end) = n_out;
    
    d1(1) = 1e-6;
    d1(2:2:2*N) = dB;
    d1(3:2:2*N+1) = dA;
    d1(end-5) = dsecondlast_A;
    d1(end-4) = dsecondlast_B;
    d1(end-3) = dAlO;
    d1(end-2) = dlast;
    d1(end-1) = tail;
    d1(end) = d_out;
    
    d2(1) = 1e-6;
    d2(2:2:2*N) = dB;
    d2(3:2:2*N+1) = dA;
    d2(end-4) = dsecondlast_A;
    d2(end-3) = dsecondlast_B;
    d2(end-2) = dAlO;
    d2(end-1) = dlast;
    d2(end) = d_out;
    
    d3(1) = 1e-6;
    d3(2:2:2*N) = dB;
    d3(3:2:2*N+1) = dA;
    d3(end-3) = dsecondlast_A;
    d3(end-2) = dsecondlast_B;
    d3(end-1) = dAlO;
    d3(end) = d_out;
    
    RT = stackrt(n1,d1,c/lambda,theta);
    r1=RT.Rp;
    idx1=findpeaks(1-r1);
    field = stackfield(n1,d1,c/lambda,theta(idx1),1,sum(d1),sum(d1));
    H1=abs(pinch(sqrt(field.Hp(1,1,:,1,1,1)^2+field.Hp(1,1,:,1,1,2)^2+field.Hp(1,1,:,1,1,3)^2)))^2;
    RT = stackrt(n2,d2,c/lambda,theta);
    r2=RT.Rp;
    idx2=findpeaks(1-r2);
    field = stackfield(n2,d2,c/lambda,theta(idx2),1,sum(d2),sum(d2));
    H2=abs(pinch(sqrt(field.Hp(1,1,:,1,1,1)^2+field.Hp(1,1,:,1,1,2)^2+field.Hp(1,1,:,1,1,3)^2)))^2;
    RT = stackrt(n3,d3,c/lambda,theta);
    r3=RT.Rp;
    idx3=findpeaks(1-r3);
    field = stackfield(n3,d3,c/lambda,theta(idx3),1,sum(d3),sum(d3));
    H3=abs(pinch(sqrt(field.Hp(1,1,:,1,1,1)^2+field.Hp(1,1,:,1,1,2)^2+field.Hp(1,1,:,1,1,3)^2)))^2;
    
    n_eff1=sin(theta(idx1)*pi/180)*n_in;
    n_eff2=sin(theta(idx2)*pi/180)*n_in;
    n_eff3=sin(theta(idx3)*pi/180)*n_in;
    
    #contrast1a=n_eff1-n_eff2;
    #contrast1b=n_eff1/n_eff2;
    
    #contrast2a=-(n_eff3-n_eff2);
    #contrast2b=n_eff2/n_eff3;
    contrast2a=-(n_eff3-n_eff1);
    contrast2b=n_eff1/n_eff3;
    
    # various contributions to the partition function
    min_a=0.110;
    max_a=0.130;
    min_b=1.110;
    max_b=1.130;
    P(1) = 1; #threshold(contrast1a,min_a,max_a);
    P(2) = threshold(contrast2a,min_a,max_a);
    P(3) = 1; #threshold(contrast1b,min_b,max_b);
    P(4) = threshold(contrast2b,min_b,max_b);
     
    min_r = 0.40;
    max_r = 0.60;
    P(5)=threshold(1-r1(idx1),min_r,max_r);
    P(6)=1;#threshold(1-r2(idx2),min_r,max_r);
    #max_r = 0.50;
    P(7)=threshold(1-r3(idx3),min_r,max_r);
    
    min_H = 1000;
    max_H = 2000;
    P( 8) = threshold(H1,min_r,max_r);
    P( 9) = 1;# threshold(H2,min_r,max_r);
    max_H = 1000;
    P(10) = threshold(H3,min_r,max_r);
    P_new = prod(P);
    Pm(1:end-1,j)=P;
        if (P_new > Partition & theta(idx2) > theta_lim & theta(idx2) > theta_lim & theta(idx3) > theta_lim) {
            Partition = P_new;
            best_parameters = parameters;
            ?j;
            
            closeall;
            plot(theta,r1,r3);
            #if (P(1)>0.8 and P(2)>0.8 and P(5)>0.9 and P(6)>0.9 and P(7)>0.9 and P(8)>0.3 and P(9)>0.5 and P(10)>0.5 ) {
                #tol=0;
            #}
    }
            Pm(end,j)=Partition;
}
Pm=log10(Pm);
plot(1:400,Pm(2,:),Pm(4,:),Pm(5,:),Pm(7,:),Pm(8,:),Pm(10,:),Pm(11,:));
plot(1:400,10^Pm(11,:));

#matlabsave('best_param',best_parameters);
savedata('best_param3',best_parameters,best_index);

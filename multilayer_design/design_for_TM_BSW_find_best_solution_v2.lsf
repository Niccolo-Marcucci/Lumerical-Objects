closeall;
clear;

randreset;
# arbitrary partition functions
function threshold(x, minimum, maximum) {
    width = maximum-minimum;
    average = (maximum+minimum)/2;
    KbT = width/5;
    return 1-1/(exp((x-average)/KbT)+1);
}
function range_f(x, minimum, maximum) {
    fwhm = maximum-minimum;
    average = (maximum+minimum)/2;
    sigma = fwhm/4;
    return 1-exp(-(x-average)^2/(2*sigma^2));
}
# random tossing
function toss(value, ranges){
    return round( value-ranges*(rand-0.5));
}


n_AlO=1.65+1i*1e-4;
n_in=1.5;
n_out=1;
nL=1.49+1i*1e-4;
nH=2.53+1i*1e-4;
ntail=1.49;

theta_lim = asin(n_out/n_in)/pi*180+0.5;
theta = linspace(40,60,1e4);                    # angle vector10
lambda=570e-9;
N=11;

kL=2*pi/lambda*real(nL)*cos(40/180*pi);
kH=2*pi/lambda*real(nH)*cos(40/180*pi);
FF=0.7;
period=pi*0.95/(kL*FF+kH*(1-FF));
dL_0=period*FF;
dH_0=period*(1-FF);
tail_0=
dlastTitania_0=
dAlO_0=20e-9;
dsecondlastTitania_0=0.2*dH_0;
dlastSilica_0=dL_0*0.75;
d_out=0e-6;

parameters = matrix(7);
start_parameters = matrix(7);
#start_parameters(1) = 75e-9;          # pmma thickness
#start_parameters(2) = dH_0*1.45;      # last titania layer thickness
#start_parameters(3) = 20e-9;          # AlO layer thicknes (etch stop layer)
#start_parameters(4) = 0.2*dH_0;       # second last titania layer (a layer below etch stop)
#start_parameters(5) = dL_0*0.75;      # last Silica layer
#start_parameters(6) = dL_0;
#start_parameters(7) = dH_0;
loaddata('best_param');
start_parameters = best_parameters;
# N high-low couples + one for substrate, one for air, one for the pmma layer, one for last titania
# one for allumina protective layer and one for second last titania.
N_layers=2*N+6;   
n1 = matrix(N_layers);   # with all layer including pmma
n2 = matrix(N_layers-1); # without pmma
n3 = matrix(N_layers-2); # without last titania
d1 = matrix(N_layers);
d2 = matrix(N_layers-1);
d3 = matrix(N_layers-2);

P=matrix(10);
Partition = 0 ; 
P_old = Partition;
i=0;
step = 1/10;
#for (parameters(1)=start_parameters(1)*0.5 ; parameters(1)<start_parameters(1)*1.5 ; parameters(1)=parameters(1)+start_parameters(1)*step) { 
#for (parameters(2)=start_parameters(2)*1 ; parameters(2)<start_parameters(2)*1.5 ; parameters(2)=parameters(2)+start_parameters(2)*step) { 
#for (parameters(3)=15e-9                   ; parameters(3)<130e-9                  ; parameters(3)=parameters(3)+130e-9*step) { 
#for (parameters(4)=start_parameters(4)*0   ; parameters(4)<start_parameters(4)*2   ; parameters(4)=parameters(4)+start_parameters(4)*step) { 
#for (parameters(5)=start_parameters(5)*0.5 ; parameters(5)<start_parameters(5)*1.5 ; parameters(5)=parameters(5)+start_parameters(5)*step) { 
#for (parameters(6)=start_parameters(6)*0.9 ; parameters(6)<start_parameters(6)*1.1 ; parameters(6)=parameters(6)+start_parameters(6)*1e-1) { 
#for (parameters(7)=start_parameters(7)*0.9 ; parameters(7)<start_parameters(7)*1.1 ; parameters(7)=parameters(7)+start_parameters(7)*1e-1) { 
    
    i=i+1;
    tail = parameters(1);
    dlastTitania = parameters(2);
    dAlO = parameters(3);
    dsecondlastTitania = parameters(4);
    dlastSilica = parameters(5);
    dL = parameters(6);
    dH = parameters(7);
    
    #n1(1) = n_in;
    #n1(2:2:2*N) = nH;
    #n1(3:2:2*N+1) = nL;
    #n1(end-4) = nH;
    #n1(end-3) = n_AlO;
    #n1(end-2) = nH;
    #n1(end-1) = ntail;
    #n1(end) = n_out;
    
    n2(1) = n_in;
    n2(2:2:2*N) = nH;
    n2(3:2:2*N+1) = nL;
    n2(end-3) = nH;
    n2(end-2) = n_AlO;
    n2(end-1) = nH;
    n2(end) = n_out;
    
    n3(1) = n_in;
    n3(2:2:2*N) = nH;
    n3(3:2:2*N+1) = nL;
    n3(end-2) = nH;
    n3(end-1) = n_AlO;
    n3(end) = n_out;
    
    #d1(1) = 1e-6;
    #d1(2:2:2*N) = dH;
    #d1(3:2:2*N+1) = dL;
    #d1(end-5) = dlastSilica;
    #d1(end-4) = dsecondlastTitania;
    #d1(end-3) = dAlO;
    #d1(end-2) = dlastTitania;
    #d1(end-1) = tail;
    #d1(end) = d_out;
    
    d2(1) = 1e-6;
    d2(2:2:2*N) = dH;
    d2(3:2:2*N+1) = dL;
    d2(end-4) = dlastSilica;
    d2(end-3) = dsecondlastTitania;
    d2(end-2) = dAlO;
    d2(end-1) = dlastTitania;
    d2(end) = d_out;
    
    d3(1) = 1e-6;
    d3(2:2:2*N) = dH;
    d3(3:2:2*N+1) = dL;
    d3(end-3) = dlastSilica;
    d3(end-2) = dsecondlastTitania;
    d3(end-1) = dAlO;
    d3(end) = d_out;
    
    #RT = stackrt(n1,d1,c/lambda,theta);
    #idx1=findpeaks(1-RT.Rp);
    #r1=1-RT.Rp;
    #field = stackfield(n1,d1,c/lambda,theta(idx1),1,sum(d1),sum(d1));
    #H1=abs(pinch(sqrt(field.Hp(1,1,:,1,1,1)^2+field.Hp(1,1,:,1,1,2)^2+field.Hp(1,1,:,1,1,3)^2)))^2;
    RT = stackrt(n2,d2,c/lambda,theta);
    idx2=findpeaks(1-RT.Rp);
    r2=1-RT.Rp;
    field = stackfield(n2,d2,c/lambda,theta(idx2),1,sum(d2),sum(d2));
    H2=abs(pinch(sqrt(field.Hp(1,1,:,1,1,1)^2+field.Hp(1,1,:,1,1,2)^2+field.Hp(1,1,:,1,1,3)^2)))^2;
    RT = stackrt(n3,d3,c/lambda,theta);
    idx3=findpeaks(1-RT.Rp);
    r3=1-RT.Rp;
    field = stackfield(n3,d3,c/lambda,theta(idx3),1,sum(d3),sum(d3));
    H3=abs(pinch(sqrt(field.Hp(1,1,:,1,1,1)^2+field.Hp(1,1,:,1,1,2)^2+field.Hp(1,1,:,1,1,3)^2)))^2;
    
    #n_eff1=sin(theta(idx1)*pi/180)*n_in;
    n_eff2=sin(theta(idx2)*pi/180)*n_in;
    n_eff3=sin(theta(idx3)*pi/180)*n_in;
    
    #contrast1a=n_eff1-n_eff2;
    #contrast1b=n_eff1/n_eff2;
    
    contrast2a=n_eff3-n_eff2;
    contrast2b=n_eff3/n_eff2;
    
    # various contributions to the partition function
    min_a=0.109;
    max_a=0.125;
    min_b=1.100;
    max_b=1.125;
    P(1) = 1; #threshold(contrast1a,min_a,max_a);
    P(2) = threshold(contrast2a,min_a,max_a);
    P(3) = 1; #threshold(contrast1b,min_b,max_b);
    P(4) = threshold(contrast2b,min_b,max_b);
     
    min_r = 0.25;
    max_r = 0.40;
    P(5)=1;#threshold(r1(idx1),min_r,max_r);
    P(6)=threshold(r2(idx2),min_r,max_r);
    P(7)=2*threshold(r3(idx3),min_r,max_r);
    
    min_H = 900;
    max_H = 2000;
    P( 8) = 1; #threshold(H1,min_r,max_r);
    P( 9) = threshold(H2,min_r,max_r);
    P(10) = 2*threshold(H3,min_r,max_r);
    
    P_new = prod(P);
    if (P_new > P_old and theta(idx2) > theta_lim and theta(idx2) > theta_lim and theta(idx3) > theta_lim) {
        ?i;
        P_old = Partition;
        Partition = P_new;
        best_parameters = parameters;
        closeall;
        plot(theta,r1,r2,r3);
    }
#}}}}#}}}

#matlabsave('best_param',best_parameters);
savedata('best_param',best_parameters);
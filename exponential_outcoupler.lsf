# Copyright 2020 Niccol√≤ Marcucci <niccolo.marcucci@polito.it>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
##########################################################################

### This file creates a structure that follows the curve described as 
### r=r0*exp(tan(alpha)*theta), in polar coordinates. It describes a curve
### that is always tilded by alpha degrees with respect to r (radius coming
### from the origin). 
### THIS CODE IS INCOMPLETE! It was meant to substitute a circular or a
### spiral grating, but the part referring to the spiral version is not ready.
### Therefore, setting the property 'topological charge' to any value different
### from 0 will give an error.

addstructuregroup;
set('name','exponential outcoupler');
set('x',0);
set('y',0);
set('z',0);
    adduserprop('material groove',5,'<Object defined dielectric>');
    adduserprop('index groove',0,1);
    adduserprop('N rings',0,10);             # high refreactive index layer
    adduserprop('topological charge',0,0);   # number of arms of the spiral
    adduserprop('thickness',2,0.1e-6);       
    adduserprop('resolution',0,50);	
    adduserprop('groove tilt',0,45);         # alpha
    adduserprop('start radius',2,1.5e-6);    # r0
    adduserprop('period',2,0.25e-6);
    adduserprop('fill factor',0,0.5);
    adduserprop('z min',2,0);
    
    myscript= " 
        deleteall;
        # setting the property 'topological charge' to any value different
        # from 0 it will give an error
        material_out = %material groove%;
        index_out = %index groove%;
        n_rings = %N rings%;
        start_radius = %start radius%;
        lambda = %period%;
        n_arms = %topological charge%;
        FF = %fill factor%;
        D=start_radius*2;
        scatter_tilt = %groove tilt%/180*pi;
        resolution = 2*resolution*n_rings;  # even value required
        
        radius = matrix(resolution/2);        # radius, function of theta
        theta = matrix(resolution/2);
        vertices = matrix(2,resolution);
        
        int_res=15;
        r_n=matrix(int_res);
        the=matrix(int_res);
        vert=matrix(2,int_res);
        
        if (n_arms != 0) {
            # Each arm opf the spiral is defined by a polygon 
            for (j=0:abs(n_arms)-1) { 
                alpha=scatter_tilt;
                n_scatter = round(2*pi*start_radius/lambda);
                sc_length = 2*pi*radius/n_scatter;
                sc_width = lambda*FF*cos(alpha);
                for ( k = 1:n_scatter ) {
                    location_tilt = 2*pi/n_scatter*k/n_arm;
                    
                    # define theta   
                    theta_end=1/tan(alpha)*log(n_rings*lambda/start_radius+1);
                    theta = linspace(0,theta_end,resolution/2);
                    # parametrize the radius
                    radius_base= (start_radius+lambda*(location_tilt+theta)/(2*pi/n_arms))*exp(tan(alpha)*theta);
                    theta = theta+location_tilt;
                    x_prime=tan(alpha)*radius_base*cos(theta)-radius_base*sin(theta);
                    y_prime=tan(alpha)*radius_base*sin(theta)+radius_base*cos(theta);
                    abs_v=sqrt(x_prime^2+y_prime^2);
                    vertices(1,1:resolution/2) = radius_base*cos(theta)+sc_width*y_prime/abs_v/2;	
                    vertices(2,1:resolution/2) = radius_base*sin(theta)-sc_width*x_prime/abs_v/2;
                    vertices(1,end:-1:resolution/2+1) = radius_base*cos(theta)-sc_width*y_prime/abs_v/2;	
                    vertices(2,end:-1:resolution/2+1) = radius_base*sin(theta)+sc_width*x_prime/abs_v/2;
                    
                    # add polygon object and set properties
                    addpoly;		
                        set('name','arm_'+num2str(k));
                        set('vertices',vertices);
                        set('material',material_out);
                        if(get('material')=='<Object defined dielectric>') 
                        { set('index',index_out); }
                        set('z min', %z min%);
                        set('z max', %z min%+thickness);                 
                }
            }
        } else {
           if (n_rings!=0) {
            alpha=-scatter_tilt;
            n_scatter = round(2*pi*start_radius/lambda);
            sc_length = 2*pi*radius/n_scatter;
            sc_width = lambda*FF*cos(alpha);
            for ( k = 1:n_scatter ) {
                location_tilt = 2*pi/n_scatter*k;
                
                # define theta   
                theta_end=1/tan(alpha)*log(n_rings*lambda/start_radius+1);
                theta = linspace(0,theta_end,resolution/2);
                # parametrize the radius
                radius_base= start_radius*exp(tan(alpha)*theta);
                theta = theta+location_tilt;
                x_prime=tan(alpha)*radius_base*cos(theta)-radius_base*sin(theta);
                y_prime=tan(alpha)*radius_base*sin(theta)+radius_base*cos(theta);
                abs_v=sqrt(x_prime^2+y_prime^2);
                vertices(1,1:resolution/2) = radius_base*cos(theta)+sc_width*y_prime/abs_v/2;	
                vertices(2,1:resolution/2) = radius_base*sin(theta)-sc_width*x_prime/abs_v/2;
                vertices(1,end:-1:resolution/2+1) = radius_base*cos(theta)-sc_width*y_prime/abs_v/2;	
                vertices(2,end:-1:resolution/2+1) = radius_base*sin(theta)+sc_width*x_prime/abs_v/2;
                
                # add polygon object and set properties
                addpoly;		
                    set('name','arm_'+num2str(k));
                    set('vertices',vertices);
                    set('material',material_out);
                    if(get('material')=='<Object defined dielectric>') 
                    { set('index',index_out); }
                    set('z min', %z min%);
                    set('z max', %z min%+thickness);
                }
            }
        }
    ";
    
set('script',myscript);